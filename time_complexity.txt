
1. For k loops => O(n^k) where n is the input size. 
Time complexity is about order of magnitude. 

for (int i = 1; i<= 3*n; ++i) => 3n times but O(n)
for (int i= 1; i<= n+5; ++i) => n+5 times but O(n)
for (int i= 1; i<= n; i+=2) => CEIL(n/2) times but O(n)

for (int i= 1; i<= n; ++i){
    for (int j =1; j<=m; ++j){
        //
    }
} => O(n.m)

void f (int n){
    if (n == 1) return;
    f (n-1);
} => O(n). This is because f(n) makes n function calls; the time complexity of each is O(1) 

void g(int n){
    if (n==1) return;
    g(n-1);
    g(n-1);
} => O(2^n) because (each call generates two other calls, except for when n=1): 

g(n)   -> 1 call 
g(n-1) -> 2 calls 
g(n-2) -> 4 calls 
g(1)   -> 2^(n-1) calls 
=> 1+2+4+...+ 2^(n-1) = 2^n - 1 = O(2^n)

1. O(1): A typical constant time algorithm is a direct formula that calculates and answers the question without any recursion or iteration. This time complexity doesn't depend on input size. 

2. O(logn): When the algo halves the input size at each step. 

3. O(sqrt(n)): faster than O(n) but slower than O(logn). 

4. O(n)

5. O(nlogn): This is the case when: 1. the algo is sorting the input, because the time complexity of efficient sorting algorithms is O(nlogn). 2. The algorithm uses a data structure where each operation takes O(logn) time. 

6. O(n^2): quadratic algorithm often contains two nested loops. It is possible to go through all pairs of input elements in O(n^2)

7. O(n^3): cubit algorithm contains 3 nested loops. It is possible to go through all triplers of input elements in O(n^3)

8. O(2^n): this exponential time complexity indicates that the algorithm is iterating through all subsets of input elements: {1,2,3} subsets are {}, {1}, {2}, {3}, {1,2}, {1,3}, {2,3}, {1,2,3}

9. O(n!): Iterates through all permutations of input elements. 

A polynomial time-complexity algorithm is one whose time complexity is at most O(n^k) where k is a constant. all above are polynomial except expotential ones (2^n and n!). If k is reasonably small => a polynomial time complexity algorithm is efficient. 




